# This starter workflow is for a CMake project running on multiple platforms. There is a different starter workflow if you just want a single platform.
# See: https://github.com/actions/starter-workflows/blob/main/ci/cmake-single-platform.yml
name: CMake on multiple platforms

on:
  push:
    branches: [ "main" ]
  pull_request:
    branches: [ "main" ]

jobs:
  build:
    runs-on: ${{ matrix.os }}

    strategy:
      # Set fail-fast to false to ensure that feedback is delivered for all matrix combinations. Consider changing this to true when your workflow is stable.
      fail-fast: false

      # Set up a matrix to run the following 3 configurations:
      # 1. <Windows, Release, latest MSVC compiler toolchain on the default runner image, default generator>
      # 2. <Linux, Release, latest GCC compiler toolchain on the default runner image, default generator>
      # 3. <Linux, Release, latest Clang compiler toolchain on the default runner image, default generator>
      #
      # To add more build types (Release, Debug, RelWithDebInfo, etc.) customize the build_type list.
      matrix:
        vcpkg_triplet: [x64-windows-release, x86-windows, x64-windows,  x64-windows-static, x64-windows-static-md, arm64-windows, arm64-windows-static-md, x64-uwp, arm64-uwp, x64-linux-release, x64-linux, x64-osx-release, x64-osx, arm64-osx, arm-neon-android, x64-android, arm64-android]
        build_type: [Release]
        include:
          # cl  
          - vcpkg_triplet: x64-windows-release
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: x86-windows
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: x64-windows
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: x64-windows-static
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: x64-windows-static-md
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: arm64-windows
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: arm64-windows-static-md
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: x64-uwp
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest
          - vcpkg_triplet: arm64-uwp
            c_compiler: cl
            cpp_compiler: cl
            os: windows-latest

          # gnu
          - vcpkg_triplet: x64-linux-release
            c_compiler: gcc
            cpp_compiler: g++
            os: ubuntu-latest
          - vcpkg_triplet: x64-linux
            c_compiler: gcc
            cpp_compiler: g++
            os: ubuntu-latest

          # clang
          - vcpkg_triplet: x64-osx-release
            c_compiler: clang
            cpp_compiler: clang++
            os: macos-latest
          - vcpkg_triplet: x64-osx
            c_compiler: clang
            cpp_compiler: clang++
            os: macos-latest
          - vcpkg_triplet: arm64-osx
            c_compiler: clang
            cpp_compiler: clang++
            os: macos-latest
          - vcpkg_triplet: arm-neon-android
            c_compiler: clang
            cpp_compiler: clang++
            os: ubtuntu-latest
            
          - vcpkg_triplet: x64-android
            c_compiler: clang
            cpp_compiler: clang++
            os: ubuntu-latest
            
          - vcpkg_triplet: arm64-android
            c_compiler: clang
            cpp_compiler: clang++
            os: ubuntu-latest
            

    steps:
    - uses: actions/checkout@v4

    - name: Set reusable strings
      # Turn repeated input strings (such as the build output directory) into step outputs. These step outputs can be used throughout the workflow file.
      id: strings
      shell: bash
      run: |
        echo "build-output-dir=${{ github.workspace }}/build" >> "$GITHUB_OUTPUT"
          
    - name: vcpkg-action
      uses: johnwason/vcpkg-action@v6
      id: vcpkg
      with:
        triplet: ${{ matrix.vcpkg_triplet }}
        cache-key: ${{ matrix.os }}
        revision: master
        token: ${{ github.token }}
        github-binarycache: true

    - name: Configure CMake
      # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
      # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
      run: >
        cmake -B ${{ steps.strings.outputs.build-output-dir }}
        -DCMAKE_TOOLCHAIN_FILE=${{github.workspace}}/vcpkg/scripts/buildsystems/vcpkg.cmake
        -DCMAKE_CXX_COMPILER=${{ matrix.cpp_compiler }}
        -DCMAKE_C_COMPILER=${{ matrix.c_compiler }}
        -DCMAKE_BUILD_TYPE=${{ matrix.build_type }}
        -S ${{ github.workspace }}

    - name: Build
      # Build your program with the given configuration. Note that --config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      run: cmake --build ${{ steps.strings.outputs.build-output-dir }} --config ${{ matrix.build_type }}

    - name: Test
      working-directory: ${{ steps.strings.outputs.build-output-dir }}
      # Execute tests defined by the CMake configuration. Note that --build-config is needed because the default Windows generator is a multi-config generator (Visual Studio generator).
      # See https://cmake.org/cmake/help/latest/manual/ctest.1.html for more detail
      run: ctest --build-config ${{ matrix.build_type }}
